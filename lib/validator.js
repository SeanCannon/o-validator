'use strict';

var R = require('ramda');

var Annotate = require('./validator/annotate');
var Core     = require('./validator/core');
var Err      = require('./validator/errors');


module.exports = {

  /**
   * Returns list of errors for a validation pattern with values.
   * Errors include messages generated by the default error message builder.
   * {k: Predicate} -> {k: a} -> [Object]
   *
   * Error object is in the form of:
   * {
   *   property  : String,
   *   errorCode : String,
   *   message   : String
   * }
   */
   getErrors : Core.validateWithHandlers(
     R.always([]),
     Core.withDefaultErrorMessages(R.identity)),


  /**
   * Validates arguments against the provided pattern.
   * {k: Predicate} -> {k: a} -> Boolean
   */
   validate : Core.validateWithHandlers(R.T, R.F),


   /**
    * Throws a list of errors if predicate returns false.
    * Otherwise returns the original arguments.
    * {k: Predicate} -> {k: a} -> Error | {k: a}
    */
   validateOrThrow : Core.validateWithErrorHandler(
     Core.withDefaultErrorMessages(Err.throwValidationErrors)),


  /**
   * Invokes the supplied error handler is any validation errors are found.
   * Otherwise returns the original arguments.
   * {k: Predicate} -> {k: a} -> Error | {k: a}
   */
  validateWithErrorHandler : Core.validateWithErrorHandler,


  /**
   * Returns an object that specifies the predicate and that it is required.
   * Predicate -> {predicate: Predicate, required: true}
   */
  required : Annotate.annotatePredicateAsRequired,


  /**
   * Returns an object that specifies the predicate and that it is not required.
   * Predicate -> {predicate: Predicate, required: false}
   */
  // Note: this method is currently undocumented, as there is no real reason to
  // explicitly declare a property as optional. By default all properties are assumed
  // to be optional unless declared otherwise.
  optional : Annotate.annotatePredicateAsOptional,
};
