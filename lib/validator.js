'use strict';

var R = require('ramda');

var Constant = require('./validator/constants');
var Core      = require('./validator/core');
var Err       = require('./validator/errors');


module.exports = {


  /**
   * Validates arguments against the provided schema.
   * {k: Predicate} -> {k: a} -> Boolean
   */
   validate : Core.validateWithHandlers(R.T, R.F),


  /**
   * Returns list of errors for a validation schema with values.
   * Errors include messages generated by the default error message builder.
   * {k: Predicate} -> {k: a} -> [Object]
   *
   * Error object is in the form of:
   * {
   *   property  : String,
   *   errorCode : String,
   *   message   : String
   * }
   */
   getErrors : Core.validateWithHandlers(R.always([]), Core.addDefaultErrorMessages),


   /**
    * Throws a list of errors if predicate returns false.
    * Otherwise returns the original arguments.
    * {k: Predicate} -> {k: a} -> Error | {k: a}
    */
   validateOrThrow : Core.validateWithErrorHandler(
     R.compose(Err.throwValidationErrors, Core.addDefaultErrorMessages)),


  /**
   * Low level function for creating custom validations
   * Invokes the supplied error handler if any validation errors are found.
   * Otherwise returns the original arguments.
   * Error handling function will be passed an array of annotated predicates,
   * with information containing the error code and original property.
   * ([{k: Predicate}] -> Error) -> {k: Predicate} -> {k: a} -> Error | {k: a}
   */
  validateWithErrorHandler : Core.validateWithErrorHandler,


  /**
   * Utility function that adds default error messages to a list of errors
   * [{k: Predicate}] -> [{k: Predicate}, message: String}]
   */
  addDefaultErrorMessages : Core.addDefaultErrorMessages,


  /*
   * Error codes for when a validation error is found.
   */
  errorCodes : Constant.errorCodes,


  /**
   * Returns an object that specifies the predicate and that it is required.
   * Predicate -> {predicate: Predicate, required: true}
   */
  required : Core.annotatePredicateAsRequired
};
